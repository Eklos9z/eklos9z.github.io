<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CTF自学问题收集</title>
    <url>/2023/09/06/CTF%E8%87%AA%E5%AD%A6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/</url>
    <content><![CDATA[<p><img src="/./images/CTF%E8%87%AA%E5%AD%A6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/weibo.png"></p>
<p><strong>“先动手搞起来”</strong></p>
<p>受限于CTF的分支较多，知识点也比较杂，记录一下自己不熟悉的知识点。</p>
<span id="more"></span>

<p>robots协议：网络爬虫排除标准，它是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。 当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt。基于人文道德规范建立的标准，不具备强制性（有点类似于readme.md？）<img src="/./images/CTF%E8%87%AA%E5%AD%A6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/robot.png"></p>
<p>.php 备份文件后缀：通常备份文件的后缀名为.bak 所以 index. php 的备份文件名为 index.php.bak。</p>
<p><img src="/./images/CTF%E8%87%AA%E5%AD%A6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/php.png"></p>
<p>cookie：是web服务器为了识别用户身份而设置的一小段文本文件（一小段数据） 可通过Burpsuite爬取网页中的数据包。<a href="https://www.jianshu.com/p/6fc9cea6daa2">深入理解Cookie - 简书 (jianshu.com)</a></p>
<p>Burp爆破模块使用界面：</p>
<p><img src="/./images/CTF%E8%87%AA%E5%AD%A6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/burp.png"></p>
<p>base64编码：特征是尾部可能会有等于号。</p>
<p>gif隐写：可以使用101editor打开gif图片 若gif图片无法在图片管理器中打开考虑图片是否文档开头中缺少GIF8 <code>[GIF文件头：47 49 46 38 39 61]</code></p>
<p>HTTP请求方法：</p>
<p><img src="/./images/CTF%E8%87%AA%E5%AD%A6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/http.png"></p>
<p>php:&#x2F;&#x2F;filter理解：其是php协议中的一个独有的协议，可以作为一个中间流去处理其他流，从而实现任意文件的读取。大部分情况下使用resourse以筛选过滤指定的数据流。<br>例如：某个网站的规则被制定为：如果直接用get方法请求flag <code>http://IP:PORT/?p=</code>会直接被拦截，这时候就可以考虑使用 <code>http://IP:PORT/?p=php://filter/convert.base64-encode/resource=flag</code>这样就会绕过拦截规则，以base64的格式输出flag中的文件。</p>
<p><img src="/./images/CTF%E8%87%AA%E5%AD%A6%E9%97%AE%E9%A2%98%E6%94%B6%E9%9B%86/1702452297071.png" alt="1702452297071"></p>
<p>对称加密：对称加密算法是指在加密和解密时使用的是<strong>同一个密钥</strong>。 这种方法速度快，但需要双方事先协商好密钥，并保证密钥不被泄露。它的优点是速度快，效率高，适合加密大量数据。它的缺点是密钥的分发和管理比较困难，如果密钥泄露，加密的数据就会被破解（DES、AES）</p>
<p>非对称加密：非对称加密使用一对密钥来加密和解密数据，其中一个密钥是公开的，叫做公钥，另一个密钥是私密的，叫做私钥。如果使用 <strong>公钥</strong> 对数据  <strong>进行加密</strong> ，只有用对应的 <strong>私钥</strong> 才能  <strong>进行解密</strong> 。它的优点是密钥的分发和管理比较容易，只需要公开公钥，私钥不需要共享。它的缺点是速度慢，效率低，适合加密少量数据（RSA、DSA）</p>
<p>简单来说就是，对称加密是同钥加密，同钥解密。非对称加密是公钥加密，私钥解密。</p>
<details>
<summary>对称加密与非对称加密的代码实现</summary>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基本思路是调用pycryptodome(对称加密)和cryptography(非对称加密)实现</span></span><br><span class="line"><span class="comment"># 导入所需的库</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="keyword">import</span> Cipher, algorithms, modes</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> rsa, padding</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes, serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个随机的对称密钥</span></span><br><span class="line">symmetric_key = os.urandom(<span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个AES加密器</span></span><br><span class="line">aes_cipher = Cipher(algorithms.AES(symmetric_key), modes.CBC(os.urandom(<span class="number">16</span>)), backend=default_backend())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用对称密钥加密数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">symmetric_encrypt</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 将数据转换为字节串</span></span><br><span class="line">    data = data.encode()</span><br><span class="line">    <span class="comment"># 创建一个加密器</span></span><br><span class="line">    encryptor = aes_cipher.encryptor()</span><br><span class="line">    <span class="comment"># 对数据进行填充，使其长度为16的倍数</span></span><br><span class="line">    padding_length = <span class="number">16</span> - <span class="built_in">len</span>(data) % <span class="number">16</span></span><br><span class="line">    data = <span class="built_in">bytes</span>([padding_length]) * padding_length + data</span><br><span class="line">    <span class="comment"># 返回加密后的数据，使用base64编码方便显示</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(encryptor.update(data) + encryptor.finalize())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用对称密钥解密数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">symmetric_decrypt</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 将数据解码为字节串</span></span><br><span class="line">    data = base64.b64decode(data)</span><br><span class="line">    <span class="comment"># 创建一个解密器</span></span><br><span class="line">    decryptor = aes_cipher.decryptor()</span><br><span class="line">    <span class="comment"># 返回解密后的数据，去掉填充的部分</span></span><br><span class="line">    data = decryptor.update(data) + decryptor.finalize()</span><br><span class="line">    padding_length = data[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> data[:-padding_length].decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一对非对称密钥</span></span><br><span class="line">private_key = rsa.generate_private_key(public_exponent=<span class="number">65537</span>, key_size=<span class="number">2048</span>, backend=default_backend())</span><br><span class="line">public_key = private_key.public_key()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用公钥加密数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asymmetric_encrypt</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 将数据转换为字节串</span></span><br><span class="line">    data = data.encode()</span><br><span class="line">    <span class="comment"># 使用公钥和OAEP填充方式进行加密</span></span><br><span class="line">    <span class="keyword">return</span> base64.b64encode(public_key.encrypt(data, padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=<span class="literal">None</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数，用私钥解密数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">asymmetric_decrypt</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="comment"># 将数据解码为字节串</span></span><br><span class="line">    data = base64.b64decode(data)</span><br><span class="line">    <span class="comment"># 使用私钥和OAEP填充方式进行解密</span></span><br><span class="line">    <span class="keyword">return</span> public_key.decrypt(data, padding.OAEP(mgf=padding.MGF1(algorithm=hashes.SHA256()), algorithm=hashes.SHA256(), label=<span class="literal">None</span>)).decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试一下</span></span><br><span class="line">data = <span class="string">&quot;Hello, world!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;原始数据：&quot;</span>, data)</span><br><span class="line">symmetric_data = symmetric_encrypt(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对称加密后的数据：&quot;</span>, symmetric_data)</span><br><span class="line">asymmetric_data = asymmetric_encrypt(data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;非对称加密后的数据：&quot;</span>, asymmetric_data)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;对称解密后的数据：&quot;</span>, symmetric_decrypt(symmetric_data))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;非对称解密后的数据：&quot;</span>, asymmetric_decrypt(asymmetric_data))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</details>

<p>哈希算法：哈希算法是一种单向算法，可以对任意长度的数据生成固定长度的唯一值，称为哈希值或摘要。 哈希算法不能逆向还原原始数据，只能用于验证数据的完整性和一致性。常见的哈希算法有 MD5、SHA-1、SHA-256 等。代码实现较为简单，导入hashlib，再创建一个hash对象即可。</p>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>buuctf-web刷题</title>
    <url>/2024/04/30/buuctf-web%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<p>未来怎么又可期了</p>
<span id="more"></span>
<details>
<summary>Web</summary>

<details>
<summary>[极客大挑战 2019]EasySQL</summary>

<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714459494749.png" alt="1714459494749"></p>
<p>数据交互点明显在页面上。验证SQL语句的闭合方式。</p>
<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714460320935.png" alt="1714460320935"></p>
<p>判断出来为单引号。</p>
<p>尝试使用万能密码。</p>
<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714460683481.png" alt="1714460683481"></p>
<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714460693162.png" alt="1714460693162"></p>
<p>成功 <code>flag&#123;6ff105e8-e7ac-4cd0-9f14-14d8f41db6db&#125;</code></p>
</details>

<details>
<summary>[极客大挑战 2019]Havefun</summary>

<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714461027021.png" alt="1714461027021"><br>页面上没有什么有用的信息。<br>查看一下前端：<br><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714461210520.png" alt="1714461210520"></p>
<p>尝试传入cat&#x3D;dog</p>
<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714461280981.png" alt="1714461280981"></p>
<p>成功 <code>flag&#123;9b385537-e339-4d47-ac68-10fcc3c9217c&#125;</code></p>
</details>

<details>
<summary>[HCTF 2018]WarmUp</summary>

<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714462460575.png" alt="1714462460575"><br>页面同样是没有什么有用的信息。</p>
<p>查看前端源码：</p>
<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714462534879.png" alt="1714462534879"></p>
<p>里面提到了source.php，那就前往source.php看看</p>
<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714462574772.png" alt="1714462574772"></p>
<p>出现了php源码，里面提到了还有一个hint.php，前往hint.php</p>
<p><img src="/./images/buuctf-web%E5%88%B7%E9%A2%98/1714462636641.png" alt="1714462636641"></p>
<p>提示flag的文件名是ffffllllaaaagggg。</p>
<p>回头查看source.php的信息</p>
<ul>
<li><code>$whitelist = [&quot;source&quot;=&gt;&quot;source.php&quot;,&quot;hint&quot;=&gt;&quot;hint.php&quot;];</code>: 这是一个白名单数组，只有数组中的文件名才被允许访问。</li>
<li><code>if (! isset($page) || !is_string($page))</code>: 检查 <code>$page</code> 变量是否已设置，并且确保它是一个字符串。</li>
<li><code>if (in_array($page, $whitelist))</code>: 检查 <code>$page</code> 是否直接在白名单数组中。</li>
<li><code>$_page = mb_substr($page, 0, mb_strpos($page . &#39;?&#39;, &#39;?&#39;))</code>: 这行代码试图去除查询字符串之后的部分，只留下文件名。</li>
<li><code>if (in_array($_page, $whitelist))</code>: 再次检查处理后的文件名是否在白名单中。</li>
<li><code>$_page = urldecode($page)</code>: 对 <code>$page</code> 进行 URL 解码，以防有编码过的字符。</li>
<li><code>echo &quot;you can&#39;t see it&quot;</code>: 如果文件不在白名单中，输出这个信息。</li>
<li><code>include $_REQUEST[&#39;file&#39;]</code>: 如果文件检查通过，包含并执行该文件。</li>
</ul>
<p>一共进行了四次过滤，因此构建<code>http://d4284bb3-a9a4-46be-9050-f86dd118bdb6.node5.buuoj.cn:81/source.php?file=hint.php?/../../../../ffffllllaaaagggg</code></p>
<p>成功。<code>flag&#123;8a16c171-c3a7-4dc0-8e6f-9d1892970174&#125;</code></p>
</details>
</details>
]]></content>
      <categories>
        <category>CTF学习</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>MoeCTF2023部分题目wp</title>
    <url>/2023/09/20/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/</url>
    <content><![CDATA[<p>比赛链接：<a href="https://ctf.xidian.edu.cn/">https://ctf.xidian.edu.cn/</a></p>
<p>因为本人水平有限，并且部分题目是一边做一边记录，有错误在所难免，还请各位师傅多多批评指正。</p>
<span id="more"></span>

<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><details>

<summary>http</summary>

<p>使用工具：Burp</p>
</details>

<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><details>

<summary>机位查询</summary>

<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695552040696.png"></p>
<p>使用工具：百度地图，高德地图；(exif)</p>
<p>题干的安装包里有三个文件（1、2、3）。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695546103340.png"></p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695546153083.png"></p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695546160885.png"></p>
<p>P1可以看到图片中有个很明显的南宁站，结合旁边的”高铁商务酒店”可以初步判断P1地址位于南宁高铁站附近</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695546843704.png"></p>
<p>然后根据地图与照片尝试反推位置：机位既能看到”猪霸王”所在的美食街，又能看到城市便捷酒店的远角以及南宁站的全貌。因此可以做一个大致的视线图如下。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695547408548.png"></p>
<p>模拟图显示机位大概在”摩根快捷酒店”与”运德集团小区”附近，考虑到简易标点的误差，把”君安快捷酒店”作为备选项，选择用百度实景地图查看一下附近的具体信息。<img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695547590711.png"></p>
<p>很显然，只有”嘉士摩根国际”这个建筑具备机位的相关条件，”运德集团小区”的建筑高度无法实现该效果，如果采取相同角度在”君安快捷酒店”拍照，”嘉士摩根国际”必然会出现在照片中。因此P1的flag片段为”jiashi”（注意平翘舌，别问我为什么）。</p>
<p>P2有一个很明显的”中山路美食街”的特征，扔到bing搜索一下。<img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695548004807.png"></p>
<p>又在南宁，顺手看一眼图片。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695548056397.png"></p>
<p>看到一个类似的图片，点进去发现是素材库。判断这个图片可能是网图，开始百度识图。<img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695548274601.png"></p>
<p>发现是某摄影比赛的作品，于是<del>找到主办方联系作者发邮件问照片是在哪拍的，</del> 打开百度地图搜索南宁中山路美食街</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695548713876.png"></p>
<p>根据”琉璃净”的位置确认具体方位。然后根据照片推断大致机位位置。（这里吐槽一下百度地图和高德地图一个不支持地图旋转，一个没有实景地图）</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695548962411.png"></p>
<p>根据上面比赛信息，可以排除在马路上使用无人机进行拍摄，所以只能是在”广西高等法院办公楼旧址”所在的区域，利用百度实景地图瞄一眼。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695549111309.png"></p>
<p>显然，P2的flag片段为：baisheng</p>
<p>P3比较麻烦，整个照片几乎没有有效的特征信息，只有最远处高楼有”广西农信”的字样，因此我猜测照片还是在南宁，在百度地图上尝试搜索”时代丽都”。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695549302124.png"></p>
<p>运气很好。并且根据近大远小的透视关系。以及”时代丽都”和”中国人保大厦”的相对位置，可以很容易判断照片是从左往右拍摄的。照片下方有一串95500的电话，经过查询是太平洋保险的电话，由此向左寻找和太平洋相关的地标。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695549579432.png"></p>
<p>初步判断是左边的”疫苗临床研究所”，查询全景地图。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695549812014.png"></p>
<p>显然右边的黄色建筑（疾病预防控制中心）的高度不足以越过”太平洋世纪广场”所在的楼，所以还需要再重新定位。</p>
<p>再往左看，发现最近同时具备能拍摄”太平洋世纪广场”并且高度明显远高于”太平洋世纪广场”的建筑仅可能有”铭湖经典”、”东方明珠花园”和”汇金苑”</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695550053013.png"></p>
<p>此时我发现了”中国人保”右边的字被挡住了，因此在通过实景地图查询中国人保标牌在建筑上的相对位置可以模拟一条较为精确的视线。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695550372881.png"></p>
<p>大致为2&#x2F;3的位置。同时根据机位大概在”时代丽都”与”中国人保财险”的位置正中，并且”时代丽都”所在的区域背后有一条视角偏左的马路，可以模拟另一条视线图。同时照片是刚好只能看到”太平洋世纪广场”的电话的，所以可以做第三条视线图。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695551035234.png"></p>
<p>受限于误差，仅仅排除了”铭湖经典”。并且不能判断究竟是”东方明珠花园”的前楼还是”东方明珠花园”与”汇金苑”的侧楼，然后我又仔细观察了一遍照片，发现有一个红色标识的楼位于机位的正中央。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695551258300.png"></p>
<p>区域特征是旁边有一些红色的楼群，并且几乎都是高度较高的建筑，以及一个红色的不明logo，利用卫星地图确认了目标楼，并作了视线图，由于位于照片正中央，因此只需作平行线即可。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695551520367.png"></p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695551566402.png"></p>
<p>然后再通过实景地图确认，”东方明珠花园”前楼的高度不足，因此P3的flag片段为”huijin”。</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695551701456.png"></p>
<p>最后，关于P3的这些各位读者其实都可以不看，因为我直到整理wp的时候才想起来把照片扔exif里查一下，里面写了经纬度……</p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695551823956.png"></p>
<p><img src="/./images/MoeCTF2023%E9%83%A8%E5%88%86%E9%A2%98%E7%9B%AEwp/1695551866254.png"></p>
<p>哭了，我的头发，我对不起你。</p>
</details>
]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>利用hexo在github上搭建个人博客</title>
    <url>/2023/08/15/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>由于哥们的服务器过期了，不好意思找他续费，于是决定自己搭一个blog，国内的要么广告多（X书），要么后台略显老旧（X园），几经挑选之后决定利用hexo在github上搭建。</p>
<p>搭建的过程基本参考了<a href="https://www.cnblogs.com/huanhao/p/hexobase.html#%E9%85%8D%E7%BD%AE%E4%B8%BB%E9%A2%98">【基础篇】hexo博客搭建教程</a>。<br>但是可能是由于版本更新的问题，遇到了一些意料之外的情况。</p>
<p>同时基于原本的教程增加了一些新功能并作此记录。</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 2023&#x2F;12&#x2F;1：记录了添加谷歌日历订阅的简易过程</li>
<li><input checked="" disabled="" type="checkbox"> 2024&#x2F;4&#x2F;30: 记录了修正hexo new生成页面需要手动修改类型(categorie -&gt; categories)的问题</li>
</ul>
<span id="more"></span>

<h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><ol>
<li>在git bash中执行安装cnpm出错<br>错误1：Error: EPERM: operation not permitted<br>解决方案：利用管理员模式打开git即可。<br>错误2：ERR! code EPERM<br>解决方案：将C:&#x2F;user&#x2F;用户名&#x2F;.npmrc删除（需要打开隐藏文件）。</li>
<li>上传github时页面主题未显示<br>解决方案：分别在博客页面所在的文件夹执行hexo clean后再执行hexo g -d与 hexo d。（无法确认究竟是什么导致的问题，推测是缓存问题。）</li>
<li>修改schemes后上传无效<br>删除themes&#x2F;next 中的.git（隐藏），再重新执行hexo g -d与 hexo d即可.</li>
</ol>
<p>另：由于github的项目规则更改，如果按照链接中的教程会将页面信息上传到项目的master分支中，此时只需将（根目录下的）页面配置文件中的branch项改成main即可。</p>
<ol start="4">
<li><p>图片插入无法显示</p>
<p>图片根目录位于 &#x2F;博客名称&#x2F;themes&#x2F;主题名&#x2F;source&#x2F;images。即如果需要插入图片，需要引用的代码格式为 :<code>！[](./images/图片名（或者可以加入二级文件	夹）))</code></p>
<p>可以用hexo s在本地页面中检查是否成功，同时本地页面可以动态调整。</p>
</li>
<li><p>新版hexo下文章创建无法分段</p>
<p>需要在文章正文需要分段的地方自行添加 <code>&lt;!--more--&gt;</code></p>
</li>
</ol>
<h2 id="增加谷歌日历订阅"><a href="#增加谷歌日历订阅" class="headerlink" title="增加谷歌日历订阅"></a>增加谷歌日历订阅</h2><details>
<summary>展开</summary>

<p>（以信息来源：<a href="https://www.ctfhub.com/#/calendar">CTFHub calendar</a>为例）</p>
<ol>
<li><p>打开主题内的_config.yml,找到calendar备用（\themes\next_config.yml）。<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701415622456.png" alt="1701415622456"></p>
</li>
<li><p>打开谷歌开发控制板 <code>https://console.cloud.google.com/apis/dashboard</code> ，创建一个新项目（名字随意，位置默认）。<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701416010725.png" alt="1701416010725"></p>
</li>
<li><p>在上方搜索框中搜索：Google calendar api.选择并启用。<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701415764731.png" alt="1701415764731"></p>
</li>
<li><p>打开OAuth consent screen，名称随意，User type选外部，邮箱填写自己的即可，范围勾选所有的Google calendar api。测试用户不用管，然后继续<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701416611080.png" alt="1701416611080"></p>
</li>
<li><p>打开凭据，选择创建凭据-api密钥，复制生成的密钥到_config.yml中的api_key里。<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701416630608.png" alt="1701416630608"><br>5.5. 如果有需要可以在api设置中add自己的网站为过滤条件，可以防止api被恶意使用（可选）<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701417104331.png" alt="1701417104331"></p>
</li>
<li><p>打开谷歌日历，打开设置-添加日历-通过网址添加<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701417220508.png" alt="1701417220508"></p>
</li>
<li><p>打开刚才添加的日历，找到集成日历，复制集成日历的日历ID。（如果添加的是自己的日历需要将日历设置为公开）<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701417310583.png" alt="1701417310583"></p>
</li>
<li><p>将日历id填入_config.yml。</p>
<p><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1714357303411.png" alt="1714357303411"></p>
</li>
<li><p>在网站根目录用命令 <code>hexo new page schedule</code>创建日程表页面。</p>
</li>
<li><p>修改刚刚创建的页面，添加 <code>type: scheldule</code>，可自定义修改名字。<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701417519112.png" alt="1701417519112"></p>
</li>
<li><p>启用menu中的schedule。<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1701417720304.png" alt="1701417720304"></p>
</li>
<li><p>hexo s 在本地查看无误后分别执行 <code>hexo clean</code>和 <code>hexo g -d</code>推送。</p>
</li>
</ol>
</details>

<h2 id="修正hexo-new生成页面需要手动修改类型-categorie-categories-的问题"><a href="#修正hexo-new生成页面需要手动修改类型-categorie-categories-的问题" class="headerlink" title="修正hexo new生成页面需要手动修改类型(categorie -&gt; categories)的问题"></a>修正hexo new生成页面需要手动修改类型(categorie -&gt; categories)的问题</h2><details>
<summary>展开</summary>

<p>不确定是我个人的问题，还是hexo的普遍问题，此问题曾导致：使用<code>hexo new</code>生成页面时，默认生成的页面里categories拼写错误，需要手动修改。<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1714442743740.png" alt="1714442743740"><br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1714442805573.png" alt="1714442805573"><br>解决方案：进入 <code>.\%BLOG_NAME%\scaffolds</code>里修改自己使用的页面默认格式。<br><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1714443016916.png" alt="1714443016916"><br>如果不确定自己使用的哪个页面，前往根目录的 <code>_config.yaml</code>里的<code>default_layout</code>列查看</p>
<p><img src="/./images/%E5%88%A9%E7%94%A8hexo%E5%9C%A8github%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1714443180903.png" alt="1714443180903"></p>
</details>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>机器人比赛避障项目赛后总结</title>
    <url>/2023/08/15/%E6%9C%BA%E5%99%A8%E4%BA%BA%E6%AF%94%E8%B5%9B%E9%81%BF%E9%9A%9C%E9%A1%B9%E7%9B%AE%E8%B5%9B%E5%90%8E%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>在见到避障比赛的文件之后，对比赛算法的设计并没有我想象中那么困难：机器人直行——机器人识别到箭头——机器人向箭头指向的方向平移——机器人视野脱离箭头——机器人直行，但是直觉与经验都在告诉我这个比赛最困难的地方就是在于怎么样才能去识别到三个箭头的方向。</p>
<span id="more"></span>

<p>首先我通过阅读材料以及代码，很容易便对颜色识别代码进行了改写，通过改写ColorDetect.py中113行—133行，实现了识别到红色和蓝色向左平移，识别到黄色向右平移。如未识别到颜色则直行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> debug:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> __isRunning:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> detect_color != <span class="string">&#x27;None&#x27;</span>:</span><br><span class="line"></span><br><span class="line">               AGC.runActionGroup(<span class="string">&#x27;go_forward_fast&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                action_finish = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> detect_color == <span class="string">&#x27;red&#x27;</span>:</span><br><span class="line"></span><br><span class="line">AGC.runActionGroup(<span class="string">&#x27;left_move&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    detect_color = <span class="string">&#x27;None&#x27;</span></span><br><span class="line"></span><br><span class="line">                    draw_color = range_rgb[<span class="string">&quot;black&quot;</span>]             </span><br><span class="line"></span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">elif</span> detect_color == <span class="string">&#x27;yellow&#x27;</span>:</span><br><span class="line"></span><br><span class="line">AGC.runActionGroup(<span class="string">&#x27;right_move&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    detect_color = <span class="string">&#x27;None&#x27;</span></span><br><span class="line"></span><br><span class="line">                    draw_color = range_rgb[<span class="string">&quot;black&quot;</span>]             </span><br><span class="line"></span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> detect_color == <span class="string">&#x27;blue&#x27;</span>:</span><br><span class="line"></span><br><span class="line">AGC.runActionGroup(<span class="string">&#x27;left_move&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    detect_color = <span class="string">&#x27;None&#x27;</span></span><br><span class="line"></span><br><span class="line">                    draw_color = range_rgb[<span class="string">&quot;black&quot;</span>]             </span><br><span class="line"></span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">                    time.sleep(<span class="number">0.01</span>)         </span><br><span class="line"></span><br><span class="line">                action_finish = <span class="literal">True</span>         </span><br><span class="line"></span><br><span class="line">                detect_color = <span class="string">&#x27;None&#x27;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">               time.sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br></pre></td></tr></table></figure>

<p>在实际测试中发现可能由于机器人腿部舵机或是场地摩擦力问题导致机器人并不能完全的达到平移效果，经过调整，将“平移”动作后加入一个“转体”动作即可修正平移产生的过度偏差。后续的工作便是在箭头识别设计成功之后，将颜色识别替换为箭头识别即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> detect_color == <span class="string">&#x27;red&#x27;</span>:</span><br><span class="line"></span><br><span class="line">AGC.runActionGroup(<span class="string">&#x27;left_move&#x27;</span>)</span><br><span class="line"></span><br><span class="line">AGC.runActionGroup(<span class="string">&#x27;turn_left_small_step&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    detect_color = <span class="string">&#x27;None&#x27;</span></span><br><span class="line"></span><br><span class="line">                    draw_color = range_rgb[<span class="string">&quot;black&quot;</span>]             </span><br><span class="line"></span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">                            <span class="keyword">elif</span> detect_color == <span class="string">&#x27;yellow&#x27;</span>:</span><br><span class="line"></span><br><span class="line">AGC.runActionGroup(<span class="string">&#x27;right_move&#x27;</span>)</span><br><span class="line"></span><br><span class="line">AGC.runActionGroup(<span class="string">&#x27;turn_right_small_step&#x27;</span>)&lt;/u&gt;</span><br><span class="line"></span><br><span class="line">                    detect_color = <span class="string">&#x27;None&#x27;</span></span><br><span class="line"></span><br><span class="line">                    draw_color = range_rgb[<span class="string">&quot;black&quot;</span>]             </span><br><span class="line"></span><br><span class="line">                    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>然后是对于箭头的识别的设计，我初步的思路是将标准箭头进行对半拆分，拆分成一个包含三角形的部分和只有矩形的部分，由于包含三角形的面积总是大于只有矩形的面积。因此可以把判断条件更改为“左右部分面积谁大”，即如果左半部分的面积更大则向左移动，右半部分的面积更大则向右移动。考虑到可能出现的图像处理问题，初步选择在lab空间中对图像进行处理。（下划线处为关键代码，下同）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lab_data:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i != <span class="string">&#x27;black&#x27;</span> <span class="keyword">and</span> i != <span class="string">&#x27;white&#x27;</span>:</span><br><span class="line"></span><br><span class="line">                frame_mask = cv2.inRange(frame_lab,</span><br><span class="line"></span><br><span class="line">                                         (lab_data[i][<span class="string">&#x27;min&#x27;</span>][<span class="number">0</span>],</span><br><span class="line"></span><br><span class="line">                                          lab_data[i][<span class="string">&#x27;min&#x27;</span>][<span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">                                          lab_data[i][<span class="string">&#x27;min&#x27;</span>][<span class="number">2</span>]),</span><br><span class="line"></span><br><span class="line">                                         (lab_data[i][<span class="string">&#x27;max&#x27;</span>][<span class="number">0</span>],</span><br><span class="line"></span><br><span class="line">                                          lab_data[i][<span class="string">&#x27;max&#x27;</span>][<span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">                                          lab_data[i][<span class="string">&#x27;max&#x27;</span>][<span class="number">2</span>]))  <span class="comment">#对原图像和掩模进行位运算</span></span><br><span class="line"></span><br><span class="line">                eroded=cv2.erode(frame_mask,cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">3</span>, <span class="number">3</span>)))  <span class="comment">#腐蚀</span></span><br><span class="line"></span><br><span class="line">dilated=cv2.dilate(eroded,cv2.getStructuringElement(cv2.MORPH_RECT, (<span class="number">3</span>, <span class="number">3</span>))) <span class="comment">#膨胀</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> debug:</span><br><span class="line"></span><br><span class="line">                cv2.imshow(i, dilated)</span><br><span class="line"></span><br><span class="line">contours=cv2.findContours(dilated,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_NONE)[-<span class="number">2</span>]  <span class="comment">#找出轮廓</span></span><br><span class="line"></span><br><span class="line">                areaMaxContour, area_max = getAreaMaxContour(contours)  <span class="comment">#找出最大轮廓</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> areaMaxContour <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> area_max &gt; max_area:<span class="comment">#找最大面积</span></span><br><span class="line"></span><br><span class="line">                        max_area = area_max</span><br><span class="line"></span><br><span class="line">                        color_area_max = i</span><br><span class="line"></span><br><span class="line">                        areaMaxContour_max = areaMaxContour</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> max_area &gt; <span class="number">200</span>:  <span class="comment"># 有找到最大面积</span></span><br><span class="line"></span><br><span class="line">            ((centerX, centerY), radius) = cv2.minEnclosingCircle(areaMaxContour_max)  <span class="comment"># 获取最小外接圆</span></span><br><span class="line"></span><br><span class="line">            centerX = <span class="built_in">int</span>(Misc.<span class="built_in">map</span>(centerX, <span class="number">0</span>, size[<span class="number">0</span>], <span class="number">0</span>, img_w))</span><br><span class="line"></span><br><span class="line">            centerY = <span class="built_in">int</span>(Misc.<span class="built_in">map</span>(centerY, <span class="number">0</span>, size[<span class="number">1</span>], <span class="number">0</span>, img_h))</span><br><span class="line"></span><br><span class="line">            radius = <span class="built_in">int</span>(Misc.<span class="built_in">map</span>(radius, <span class="number">0</span>, size[<span class="number">0</span>], <span class="number">0</span>, img_w))  </span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>根据预设代码的研究发现，如果直接对图像进行分割，它可能会导致对最大图像的识别的误差，即在切割之后的图像可能不是识别到的最大的轮廓，如果在收集并处理过图像之后，对图像的腐蚀膨胀操作可能无法使图像正常识别，猜测因为图像经腐蚀膨胀后两边图像的差异化不够明显。故方案作废。</p>
<p>而后我通过在幻尔科技的官方网站上进行查阅资料，发现在介绍中有着“标签识别”的功能。于是我预想通过重定义标签或是对预设标签进行替换，即将两边箭头的图像编辑成“标签”，通过对新“标签”的识别做出反应，从而达到方向识别的效果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">detector = apriltag.Detector(searchpath=apriltag._get_demo_searchpath())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">apriltagDetect</span>(<span class="params">img</span>):  </span><br><span class="line"></span><br><span class="line">    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">    detections = detector.detect(gray, return_image=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(detections) != <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> detection <span class="keyword">in</span> detections:                </span><br><span class="line"></span><br><span class="line">            corners = np.rint(detection.corners)  <span class="comment"># 获取四个角点</span></span><br><span class="line"></span><br><span class="line">            cv2.drawContours(img, [np.array(corners, np.<span class="built_in">int</span>)], -<span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            tag_family = <span class="built_in">str</span>(detection.tag_family, encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 获取tag_family</span></span><br><span class="line"></span><br><span class="line">            tag_id = <span class="built_in">int</span>(detection.tag_id)  <span class="comment"># 获取tag_id</span></span><br><span class="line"></span><br><span class="line">            object_center_x, object_center_y = <span class="built_in">int</span>(detection.center[<span class="number">0</span>]), <span class="built_in">int</span>(detection.center[<span class="number">1</span>])  <span class="comment"># 中心点</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">tag_family, tag_id = apriltagDetect(img) <span class="comment"># apriltag检测</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tag_id <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">        cv2.putText(img, <span class="string">&quot;tag_id: &quot;</span> + <span class="built_in">str</span>(tag_id), (<span class="number">10</span>, img.shape[<span class="number">0</span>] - <span class="number">30</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.65</span>, [<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        cv2.putText(img, <span class="string">&quot;tag_family: &quot;</span> + tag_family, (<span class="number">10</span>, img.shape[<span class="number">0</span>] - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.65</span>, [<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        cv2.putText(img, <span class="string">&quot;tag_id: None&quot;</span>, (<span class="number">10</span>, img.shape[<span class="number">0</span>] - <span class="number">30</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.65</span>, [<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        cv2.putText(img, <span class="string">&quot;tag_family: None&quot;</span>, (<span class="number">10</span>, img.shape[<span class="number">0</span>] - <span class="number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">0.65</span>, [<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>经过对代码和机器人内部文件的查阅，我发现机器人的标签识别功能是建立在四个脚点的定位上，不具备对箭头等不规则图形的识别功能，同时机器人内部不存在标签相关的图像文件，难以对标签识别的代码与文件进行修改。故方案作废。</p>
<p>然后我看到了面部识别的功能介绍和代码，我计划通过修改面部识别的文件，将“箭头”作为“面部”进行识别，但经对面部识别代码以及机器人内部文件的研究，发现机器人的面部识别功能是基于.d6a模型建立起来的。无法针对已经完善的模型文件进行修改，剩余的时间也不足以训练一个新的模型，故方案作废。</p>
<p>至此，无论是剩余的时间还是任务分配都不允许我去设计其他新的思路去比赛，最终迫不得已基于思路一穷举出了可能的箭头情况并在比赛中分别调用，尽管我们及时发现并修补了机器人行动程序上的缺陷，但场地摩擦力不均带来的行动困难、机器人腿部舵机问题引起的不可控因素等场外条件将比赛算法不成熟引起的问题放大到了极致。因此很遗憾没有取得一个令人满意的成绩。</p>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA靶场练习笔记</title>
    <url>/2023/11/01/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>发现了一个很棒的靶场，里面囊括了Web方向的大多数常见漏洞，并且还分了四个难度等级（Low,Medium,High,Impossible），很适合目前我的需求。</p>
<span id="more"></span>

<p>TODO:</p>
<ul>
<li><input disabled="" type="checkbox"> Low</li>
<li><input disabled="" type="checkbox"> Medium</li>
<li><input disabled="" type="checkbox"> High</li>
<li><input disabled="" type="checkbox"> Impossible</li>
</ul>
<details>

<summary>Brute Force(暴力破解)</summary>

<details>

<summary>Low</summary>

<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698826342694.png" alt="1698826342694"></p>
<p>先随意选择一组用户名和密码看看会发生什么。</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698827316880.png" alt="1698827316880"></p>
<p>显示用户名和&#x2F;或密码错误，除此之外没有任何的机制。所以考虑使用Burp的Intruder模块对用户名和密码进行爆破。</p>
<p>这里由于username和password都需要爆破。所以考虑Pitchfork模块或者Cluster Bomb模块（Sniper和Batteringram只能导入一个payload），这里选择Clusterbomb。</p>
<p>选择字典之后开始爆破。</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698831896134.png" alt="1698831896134"></p>
<p>发现了一个长度明显有差异的返回长度。输入进去。</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698831967463.png" alt="1698831967463"></p>
</details>

</details>

<hr>
<details>
<summary>Command Injection(指令注入)</summary>
<details>
<summary>Low</summary>

<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698843230447.png" alt="1698843230447"><br><del>（是知识盲区</del>  尝试着分析了一下，工作原理可能是直接将输入框内的文字与ping命令进行拼接。</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698843498673.png" alt="1698843498673"></p>
<p>并且不能过滤不合法的输入，那么尝试一下用&amp;符号进行注入。<del>（windows命令行指令都是啥来着</del></p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698843906106.png" alt="1698843906106"></p>
</details>
</details>

<hr>
<details>
<summary>CSRF(Cross Site Request Forgery)(跨站请求伪造)</summary>
<details>
<summary>Low</summary>

<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698844012937.png" alt="1698844012937"></p>
<p>尝试抓个包。</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698845752819.png" alt="1698845752819"></p>
<p>发现是直接传递了新的密码和确认的密码，同时查看源代码发现是直接判断New password和Conf password是否相等，并没有其他的验证。</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1700221775155.png" alt="1700221775155"></p>
<p><del>普通版burp不具备生成CSRF poc的功能，换个工具先（</del>    burp汉化破解链接 <code>https://www.52pojie.cn/thread-1544866-1-1.html</code></p>
<p>或者不使用poc工具，直接构造链接 <code>http://127.0.0.1/DVWA-2.3/vulnerabilities/csrf/?password_new=123&amp;password_conf=123&amp;Change=Change#</code> 即可 ，或者再用短链接生成器包装一下看着像那么回事也可以。</p>
</details>
</details>

<hr>
<details>
<summary>File Inclusion(文件包含)</summary>
<details>

<summary>Low</summary>

<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698849299946.png" alt="1698849299946"></p>
<p>页面上给了三个php文件，逐个点击后没有发现特别有用的信息。</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698849364929.png" alt="1698849364929"></p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698849376545.png" alt="1698849376545"><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698849392702.png" alt="1698849392702"></p>
<p>然后注意到了浏览器的网址栏，发现所谓php文件的读取是直接将php文件传入page中再读出来，联系到标题的文件隐藏，尝试着将page&#x3D;file3.php改成page&#x3D;file4.php。</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1698849666992.png" alt="1698849666992"></p>
</details>
</details>

<hr>
<details>
<summary>File Upload(文件上传漏洞)</summary>
<details>
<summary>Low</summary>

<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1700222526114.png" alt="1700222526114"></p>
<p>虽然说是上传图片，但是源代码中没有对上传文件的格式作要求</p>
<p>一句话木马干就完了 <code>&lt;?php @eval($_POST[&#39;z&#39;]);?&gt;</code></p>
<p><del>tmd卡巴斯基怎么又给我的文件清理了</del></p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1700466093449.png" alt="1700466093449"></p>
<p>上传成功，可以看到下面回显了路径，然后用蚁剑连接或者拼接路径也可以</p>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1700466460394.png" alt="1700466460394"></p>
<p>成功（记得把php文件删掉</p>
</details>
</details>

<hr>
<details>
<summary>Insecure CAPTCHA(不安全验证码)</summary>

<p><strong>因配置验证码的key有问题，所以暂时搁置</strong></p>
</details>

<hr>
<details>

<summary>SQL Injection(SQL注入)</summary>

<details>
<summary>Low</summary>

<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1700468784744.png" alt="1700468784744"></p>
<blockquote>
<p>SQL注入的第一步就要判断注入类型。一般来说，SQL注入按照<strong>参数分类</strong>分为：<strong>字符型</strong>和<strong>数字型</strong>，按照<strong>页面回显</strong>分为<strong>回显注入</strong>和<strong>盲注</strong>，<strong>回显</strong>分为<strong>回显正常</strong>和<strong>回显报错</strong>，<strong>盲注</strong>分为<strong>时间盲注</strong>和<strong>布尔盲注</strong>。</p>
<p><a href="https://eklos9z.github.io/2023/10/22/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/#more">漏洞挖掘学习笔记 | Eklos&#39;s Blog (eklos9z.github.io)</a></p>
</blockquote>
<p><img src="/./images/DVWA%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0%E7%AC%94%E8%AE%B0/1700541103208.png" alt="1700541103208"></p>
</details>
</details>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞挖掘学习笔记</title>
    <url>/2023/10/22/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>为什么 <code>&lt;!--more--&gt;</code>之前必须得写点东西</p>
<span id="more"></span>

<details>
<summary>OWASP top10</summary>



</details>

<hr>
<details>
<summary>逻辑漏洞</summary>

<p>工具：Burp</p>
<p>属于业务本身可能产生的漏洞。</p>
<p>个人信息部分中可能出现文件上传漏洞，XSS，暴力破解验证码等；主要体现在是否会向后端传入一些数据。利用Burp篡改传入的输入达到相应的目的。大部分需要自己尝试。</p>
</details>

<hr>
<details>
<summary>URL跳转漏洞</summary>

<p>体现在url网址中后方加入?returnurl&#x3D; 或者是?sec&#x3D; ?url&#x3D;</p>
<p>可以让点击链接的用户重定向自后方的网址，会被原网址WAF拦截。</p>
<p>常见于业务完成场景中，如：修改密码成功、用户分享、收藏的跳转等。</p>
<p>url跳转bypass。</p>
<p>利用问号、@绕过限制。</p>
</details>

<hr>
<details>
<summary>短信轰炸漏洞</summary>

<p>发送短信&#x2F;邮件的包会无限制的发送。</p>
<p>场景常见于登录、注册、找回密码等需要会产生短信交互或者邮箱交互中。</p>
<p>主要利用途径burp的repeater模块进行重复发送。</p>
<p>bypass思路：</p>
<p>在mobile参数后面加上%20、字母等，或者修改大小写、修改cookie值或者利用调用接口绕过。</p>
</details>

<hr>
<details>
<summary>注入</summary>

<p>注入攻击的本质是使应用违背”数据与代码分离”的原则。满足注入攻击有两个基本条件：</p>
<ol>
<li>用户能控制数据的输入。</li>
<li>程序拼凑了数据。</li>
</ol>
<details>
<summary>SQL注入</summary>

<p>SQL注入的原理是利用web程序对用户输入的数据没有严格的过滤和判断，主要被用来在url或者表单中输入特殊的字符或者语句，根据数据库的反馈判断是否存在SQL注入的可能性，一般有一下几种方法：</p>
<ol>
<li>单引号法：在参数后加入单引号，如 <code>?id=1&#39;</code>,如果页面返回错误或者汇报异常，说明存在SQL注入的可能性，因为无论是字符型还是整型都会因为单引号个数不匹配而报错</li>
<li>and语句法：在参数后面加上and语句，如 <code>id=1 and 1=1</code>与 <code>id=1 and 1=2</code>，如果页面返回的结果不同，说明存在SQL注入的可能性。因为and语句会影响SQL语句的逻辑判断，从而影响查询的结果。不仅仅限于and，or、not在某些情况下都可以用作注入。</li>
<li>注释符法：在参数后面加上注释符，如 <code>id=1#</code>，如果页面的返回结果不同，说明存在SQL注入的可能性。因为注释符的存在会使剩下的语句部分失效，从而改变查询的结果。</li>
</ol>
<p>SQL注入的第一步就要判断注入类型。一般来说，SQL注入按照<strong>参数分类</strong>分为：<strong>字符型</strong>和<strong>数字型</strong>，按照<strong>页面回显</strong>分为<strong>回显注入</strong>和<strong>盲注</strong>，<strong>回显</strong>分为<strong>回显正常</strong>和<strong>回显报错</strong>，<strong>盲注</strong>分为<strong>时间盲注</strong>和<strong>布尔盲注</strong>。</p>
<p>字符型注入：注入的数据类型是字符，需要使用引号来包围，例如，<code>name=&#39;admin&#39;</code>，语句原型是 <code>select * from [lable name] where [conditions]</code> 。通过构建类似  <code>name=&#39;admin&#39; and &#39;1&#39;=&#39;1&#39;</code>的语句来判断。</p>
<p>数字型注入：注入的数据类型是数字，和字符型注入类似，但是不需要引号包围，例如，<code>id=1</code>，语句原型是 <code>selcet * from [lable name] where [conditions]</code>。可以构建类似于 <code>id=1 and 1=1</code>类似的语句来判断。</p>
<p>回显注入：回显注入的前提是数据库的查询结果会显示在页面上，通过构造联合查询和子查询的语句以获取数据库的其他信息。例如，<code>http://www.example.com/news.php?id=1&#39; union select version(),user(),database(),z #</code>，这样就可以尝试获取数据库的其他信息。其中 <code>z</code>标识占位符，<code>#</code>表示将后方的语句注释掉。</p>
<p>时间盲注：时间盲注的特点是输入的数据被拼接到SQL语句执行的时候，数据库的查询结果不会显示到页面上，只能通过页面的响应时间去判断条件是否正确，一般采用数据库的一些时间函数以制造延迟，比如MYSQL的 <code>SLEEP、BENCHMARK</code>，PostgreSQL的 <code>PG_SLEEP、GENERATE_SERIES</code>，MSSQL SERVER的 <code>WAITFOR DELAY</code>。基本利用原理是判断第一个字母是否为某个字母，如果是真则利用时间函数制造一个较长的延迟，如果是假则不做处理，这样就可以逐个套取出整个数据库名或者需要的信息。</p>
<p>布尔盲注：布尔盲注与时间盲注类似，查询结果只会返回ture和false。通常采用Substring进行截取，格式为 <code>Substring(被截取字符串，从第几位开始截取，截取长度)</code>。如果Substring被waf过滤掉了，可以考虑使用left()、right()、mid()这类等价的函数。</p>
<p>万能密码：用户名填admin’ or 1–。密码随便填，原理是用–注释掉后面的语句，并且因为or语句的存在语句一定为真，并且由于后方的语句被注释，password这一栏填什么都无所谓。</p>
<p><img src="/./images/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/1702455499619.png" alt="1702455499619"></p>
<p>如何防范SQL注入：</p>
<ol>
<li>使用预编译的SQL语句，SQL语句的语义不会发生改变，例如将SQL语句 <code>INSERT INTO class(name,id,sex) VALUES(?,?,?)</code>中的变量用 <code>?</code>来表示,即使使用了 <code>&#39;</code>去尝试进行SQL注入，系统也只会将其作为参数的一部分来执行<br>。</li>
<li>检查输入数据的数据类型，例如</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">settype</span>(<span class="variable">$offset</span>,<span class="string">&#x27;integer&#x27;</span>)；</span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT id, name FROM products ORDER BY name LIMIT 20 OFFSET <span class="subst">$offset</span>;&quot;</span>;</span><br><span class="line"><span class="variable">$query</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;SELECT id ,name FROM products ORDER BY name LIMIT 20 OFFSET %d;&quot;</span>,<span class="variable">$offset</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的代码就限制了输入数据的类型只能是int格式，这样也在一定程度上可以防范注入。<br>3. 遵循最小权限原则，避免web应用使用root、dbowner等高权限账户直接连接数据库，什么级别的使用者赋予什么级别的权限。</p>
</details>
<details>
<summary>XML注入</summary>

<p>和SQL注入相似，只是目标位于HTML网页上。</p>
</details>

<details>
<summary>代码注入</summary>
同上，但是代码注入和命令注入往往是由一些不安全的函数引起的，例如常见的一句话木马

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;z&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>eval()函数本身是将括号里的内容按照php代码处理。$_POST是将后面的[]内容以POST方法发送，即页面从eval()函数中得到了 <code>z</code>这个参数值。<code>@</code>的意义是即使执行错误也不报错。</p>
</details>

</details>

<hr>
<details>
<summary>目录遍历</summary>

<p>一般是指系统后台的目录由于各种原因被探测到，导致网站目录与文件泄露，造成的后果通常根据目录的内容决定。一般情况下会被waf拦截，但是可以通过php:&#x2F;&#x2F;filter尝试绕过。</p>
</details>

<hr>
<details>
<summary>phpinfo漏洞</summary>

<p>指通过phpinfo页面进行漏洞利用从而暴露整个php环境，包括物理目录等敏感信息，也可以利用物理机上留存的一些靶场（例如phpstudy等）进入。</p>
</details>

<hr>
<details>
<summary>备份文件下载</summary>

<p>指开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了目录下，就可以利用扫描工具进行扫描从而获得网站源码。</p>
<p>常见的网站源码备份文件后缀tar、tar.gz、zip、rar。</p>
<p>常见的网站源码备份文件名web、website、backup、back、www、wwwroot、temp。</p>
<p>如果是index.php可能还会有index.php.bak。</p>
</details>

<hr>
<details>
<summary>vim缓存</summary>

<p>当开发人员在线上使用vim编辑器，在使用过程中会留下vim编辑器缓存，当vim异常退出时，vim缓存会一直留在服务器上，引起网站源码泄露。</p>
<p>可以利用vim命令recover为原本的文件，进而查看源码。</p>
<p>因为vim缓存文件是固定格式的二进制文件，在vim缓存中这些明文字符会保留。</p>
</details>

<hr>
<details>
<summary>任意文件读取漏洞</summary>

<p>指通过一些手段读取到服务器上开发者不希望其他人读取到的文件</p>
</details>

<hr>
<details>

<summary>正则表达式绕过</summary>
正则表达式的原理是对规定的字符进行绕过，从而某种程度上增加注入的难度。
绕过的思路如下：

</details>

<hr>
<details>
<summary>文件上传漏洞</summary>
文件上传漏洞一般产生于出现文件上传点的区域中，实战中包括：头像上传、资料上传等，都可能隐含文件上传漏洞。可以通过逐个改变上传文件后缀以及上传文件头判断服务器的防守策略。
一般对这些上传点有以下的防范措施：

<ol>
<li><p>黑名单，即只要检测到文件后缀有.php、.asp、.jsp等一律禁止。一般可以尝试使用多后缀如1.jpg.php，通过嵌套多个后缀混淆服务器的判断。或者可以尝试使用大小写变形后缀，如PhP、PHp此类。</p>
</li>
<li><p>白名单，即只允许文件后缀为.jpg、.png、.gif等。绕过思路为使用%00进行截断。</p>
</li>
<li><p>文件头识别，即服务器对于上传文件的文件头进行识别。一般与白名单结合，仅通过文件头为：	FFD8FF（jpg）、89504E47（png）、47494638（gif）等。需要使用winhex工具对上传文件的文件头进行修改。</p>
</details></li>
</ol>
]]></content>
      <categories>
        <category>信息安全</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
  <entry>
    <title>笔记本键盘注册表损坏处理过程</title>
    <url>/2024/04/26/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%8D%9F%E5%9D%8F%E5%A4%84%E7%90%86%E6%80%9D%E8%B7%AF/</url>
    <content><![CDATA[<p>损坏原因暂时没有找到，暂定为机魂不悦吧</p>
<span id="more"></span>

<p>因为键盘失灵，所以后续的所有操作只能通过鼠标完成。并且因为原因未知，不排除后面继续复发的过程，所以作此记录。</p>
<ol>
<li>检查设备管理器，可以通过右键windows图标找到。</li>
</ol>
<p><img src="/./images/%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E6%B3%A8%E5%86%8C%E8%A1%A8%E6%8D%9F%E5%9D%8F%E5%A4%84%E7%90%86%E6%80%9D%E8%B7%AF/1714132399444.png" alt="1714132399444"></p>
<ol start="2">
<li>通过 <code>键盘-&gt;设备-&gt;属性</code>查看具体的报错信息，当时我得到的信息是 <code>由于其配置信息(注册表中的)不完整或已损坏，Windows 无法启动这个硬件设备。 (代码 19)</code></li>
<li>上网搜索得知故障发生在键盘对应的注册表中。于是前往注册表，Windows自带的索引直接搜索 <code>注册表</code>即可，如果没有制作索引可以用鼠标复制之前报错信息里的注册表得到registry，再通过 <code>运行</code>即可。</li>
<li>然后前往 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Class\</code>路径，在这个路径下基本都是代表着电脑里的各种设备，<code>&#123;4d36e96b-e325-11ce-bfc1-08002be10318&#125;</code>代表着键盘。经过对比网上的经验帖，发现 <code>UpperFilters</code>文件丢失。于是新建一个值补上。数值名称 <code>UpperFilters</code>，数值数据是 <code>kbdclass</code>。</li>
<li>后在设备管理器上卸载所有发生错误的键盘设备，重启，问题<del>解决</del> 解决个p。</li>
<li>回头复盘寻找思路，发现在一个帖子中有人询问 <code>UpperFilters</code>里的 <code>kbdclass</code>和 <code>vmkbd3d</code>值的问题，这才反应过来 <code>UpperFilters</code>这个值应该是 <code>多字符串值</code>，猜测和Vmware的虚拟键盘相关，参考的经验贴可能没有虚拟机环境所以给的是 <code> 字符串值</code>，于是重复第4步，并将新建值修改为  <code>多字符串值</code>后问题解决。</li>
</ol>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>自学</tag>
      </tags>
  </entry>
</search>
